
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("planor")
Loaded planor 1.3.8

> #---------------------------------------------------------------------------
> # EXAMPLES TO CHECK THE RANDOMIZATION FUNCTION
> #---------------------------------------------------------------------------
> # Example 1: classical block design
> #---------------------------------------------------------------------------
> cat("\n")

> cat("***************** RANDOMIZATION EXAMPLE 1 *****************\n")
***************** RANDOMIZATION EXAMPLE 1 *****************
> cat("\n")

> cat("A simple block design: 4 blocks and 7 treatments\n")
A simple block design: 4 blocks and 7 treatments
> cat("Model: bloc+treatment\n")
Model: bloc+treatment
> cat("N=28\n")
N=28
> #
> 
> randK <- planor.designkey(factors=c("bloc","treatment"),
+                           nlevels=c(4,7),
+                           model=~bloc+treatment, nunits=28,
+                        base=~bloc, verbose=T)
Preliminary step 1 : processing the model specifications
Preliminary step 2 : performing prime decompositions on the factors
*** Main step for prime p = 2 : key-matrix search
  no need (all columns are predefined)
*** Main step for prime p = 7 : key-matrix search
  no need (all columns are predefined)
> randP <- planor.design(key=randK)@design
> set.seed(114)
>  planor.randomize(~bloc, randP) 
   bloc treatment
1     1         1
2     1         2
3     1         3
4     1         4
5     1         5
6     1         6
7     1         7
8     2         1
9     2         2
10    2         3
11    2         4
12    2         5
13    2         6
14    2         7
15    3         1
16    3         2
17    3         3
18    3         4
19    3         5
20    3         6
21    3         7
22    4         1
23    4         2
24    4         3
25    4         4
26    4         5
27    4         6
28    4         7
>  planor.randomize(~bloc/UNITS, randP) 
   bloc treatment
1     1         1
2     1         2
3     1         4
4     1         7
5     1         3
6     1         5
7     1         6
8     2         3
9     2         6
10    2         5
11    2         1
12    2         2
13    2         7
14    2         4
15    3         5
16    3         7
17    3         3
18    3         1
19    3         2
20    3         4
21    3         6
22    4         5
23    4         2
24    4         3
25    4         4
26    4         6
27    4         7
28    4         1
> #---------------------------------------------------------------------------
> # Example 2: Latin square
> #---------------------------------------------------------------------------
> cat("\n")

> cat("***************** RANDOMIZATION EXAMPLE 2 *****************\n")
***************** RANDOMIZATION EXAMPLE 2 *****************
> cat("\n")

> cat("A Latin square: 3 rows, 3 columns, 3 treatments\n")
A Latin square: 3 rows, 3 columns, 3 treatments
> cat("Model: row + column + treatment\n")
Model: row + column + treatment
> cat("N=9\n")
N=9
> #
> lsK <- planor.designkey(factors=c("row","col","treatment"),
+                         nlevels=rep(3,3) ,
+                         model=~row+col+treatment,
+                         nunits=9,
+                        base=~row+col, verbose=T)
Preliminary step 1 : processing the model specifications
Preliminary step 2 : performing prime decompositions on the factors
*** Main step for prime p = 3 : key-matrix search
  => search for column 3 .
      first visit to column 3
The search is closed: max.sol = 1 solution(s) found 
> lsP <- planor.design(key=lsK)@design
>  planor.randomize(~row*col, lsP) 
  row col treatment
1   1   1         1
2   1   2         2
3   1   3         3
4   2   1         2
5   2   2         3
6   2   3         1
7   3   1         3
8   3   2         1
9   3   3         2
> 
> 
> proc.time()
   user  system elapsed 
  0.386   0.039   0.437 
