
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("planor")
Loaded planor 1.5.3

> # source("init.moi")
> # options(warn=2, error=recover)
> nfac <- 55
> nlev <- 2
> modelfactors <- planor.factors(factors=list(
+ k_1=c(0.8*0.4, 0),
+ k_2=c(0.8*0.2,1.2*0.2),
+ k_3=c(0.8*0.4,1.2*0.4),
+ k_4=c(0.8*0.2,1.2*0.2),
+ k_5=c(0.8*0.4,1.2*0.4),
+ k_6=c(0.8*0.2,1.2*0.2),
+ k_7=c(0.8*0.5,1.2*0.5),
+ k_8=c(0.8*0.1,1.2*0.1),
+ K_AP=c(0.8*0.7,1.2*0.7),
+ K_AC=c(0.8*0.6,1.2*0.6),
+ K_IB=c(0.8*2.2,1.2*2.2)))
> ##k_dmb=c(0.8*0.01,1.2*0.01),
> ##k_dmc=c(0.8*0.01,1.2*0.01),
> ##k_dmp=c(0.8*0.01,1.2*0.01),
> ##k_dnc=c(0.8*0.12,1.2*0.12),
> ##k_dn=c(0.8*0.01,1.2*0.01)))
> ##K_d=c(0.8*0.3,1.2*0.3),
> ##K_dp=c(0.8*0.1,1.2*0.1),
> ##K_p=c(0.8*0.1,1.2*0.1),
> ##K_mB=c(0.8*0.4,1.2*0.4),
> ##K_mC=c(0.8*0.4,1.2*0.4),
> ##K_mP=c(0.8*0.31,1.2*0.31),
> ##k_stot=c(0.8*1.0,1.2*1.0),
> ##ksB=c(0.8*0.12,1.2*0.12),
> ##k_sC=c(0.8*1.6,1.2*1.6),
> ##K_sP=c(0.8*0.6,1.2*0.6),
> ## n=c(0.8*4,1.2*4),
> ## m=c(0.8*2,1.2*2),
> ## V_phos=c(0.8*0.4,1.2*0.4),
> ## V_1B=c(0.8*0.5,1.2*0.5),
> ## V_1C=c(0.8*0.6,1.2*0.6),
> ## V_1P=c(0.8*0.4,1.2*0.4),
> ## V_1PC=c(0.8*0.4,1.2*0.4),
> ## V_2B=c(0.8*0.1,1.2*0.1),
> ## V_2C=c(0.8*0.1,1.2*0.1),
> ## V_2P=c(0.8*0.3,1.2*0.3),
> ## V_2PC=c(0.8*0.1,1.2*0.1),
> ## V_3B=c(0.8*0.5,1.2*0.5),
> ## V_3PC=c(0.8*0.4,1.2*0.4),
> ## V_4B=c(0.8*0.2,1.2*0.2),
> ## V_4PC=c(0.8*0.1,1.2*0.1),
> ## v_dBC=c(0.8*0.5,1.2*0.5),
> ## v_dBN=c(0.8*0.6,1.2*0.6),
> ## v_dCC=c(0.8*0.7,1.2*0.7),
> ## v_dIN=c(0.8*0.8,1.2*0.8),
> ## v_dPC=c(0.8*0.7,1.2*0.7),
> ## v_dPCC=c(0.8*0.7,1.2*0.7),
> ## v_dPCN=c(0.8*0.7,1.2*0.7),
> ## v_mB=c(0.8*0.8,1.2*0.8),
> ## v_mC=c(0.8*1.0,1.2*1.0),
> ## v_mP=c(0.8*1.1,1.2*1.1),
> ## v_stot=c(0.8*1.0,1.2*1.0),
> ## v_sB=c(0.8*1.0,1.2*1.0),
> ## v_sC=c(0.8*1.1,1.2*1.1),
> ## v_sP=c(0.8*1.5,1.2*1.5)
> ## ))
> nexp <- 4
> resol <- 3
> ## 
> ## ################################################
> ## # Algo symmetric
> ## ################################################
> ##
> set.seed(15)
> 
> ## ptm <- proc.time()
> ##
> ex.key <- planor.designkey(factors=modelfactors, resolution=resol, nunits=nlev^nexp, verbose=TRUE, randomsearch = TRUE)
Preliminary step 1 : processing the model specifications
Preliminary step 2 : performing prime decompositions on the factors
*** Main step for prime p = 2 : key-matrix search
  => search for columns 2 to 11 
      first visit to column 2
    ---    col. 2 ( j = 1) 14 initial candidates
      first visit to column 3
    ---    col. 3 ( j = 2) 14 initial candidates
    ---    col. 3 ( j = 2) 13 selected candidates
      first visit to column 4
    ---    col. 4 ( j = 3) 13 initial candidates
    ---    col. 4 ( j = 3) 12 selected candidates
      first visit to column 5
    ---    col. 5 ( j = 4) 12 initial candidates
    ---    col. 5 ( j = 4) 11 selected candidates
      first visit to column 6
    ---    col. 6 ( j = 5) 11 initial candidates
    ---    col. 6 ( j = 5) 10 selected candidates
      first visit to column 7
    ---    col. 7 ( j = 6) 10 initial candidates
    ---    col. 7 ( j = 6) 9 selected candidates
      first visit to column 8
    ---    col. 8 ( j = 7) 9 initial candidates
    ---    col. 8 ( j = 7) 8 selected candidates
      first visit to column 9
    ---    col. 9 ( j = 8) 8 initial candidates
    ---    col. 9 ( j = 8) 7 selected candidates
      first visit to column 10
    ---    col. 10 ( j = 9) 7 initial candidates
    ---    col. 10 ( j = 9) 6 selected candidates
      first visit to column 11
    ---    col. 11 ( j = 10) 6 initial candidates
    ---    col. 11 ( j = 10) 5 selected candidates
The search is closed: max.sol = 1 solution(s) found 
> ## cat("TEMPS planor.designkey symetrique ", proc.time()-ptm,"\n\n\n")
> 
> ################################################
> # Non symmetric
> ################################################
> 
> model<- ~(k_1+k_2+k_3
+ +k_4+k_5+k_6+k_7+k_8   
+  +K_AP   +K_AC   +K_IB)
> ##  +k_dmb  +k_dmc  +k_dmp  +k_dnc +k_dn)
> ##  +K_d+K_dp   +K_p+K_mB   +K_mC   +K_mP   +k_stot +ksB   
> ##  +k_sC   +K_sP
> ## + n+ m   +V_phos +V_1B   +V_1C   +V_1P  
> ##  +V_1PC  +V_2B   +V_2C   +V_2P   +V_2PC  +V_3B   +V_3PC  +V_4B  
> ##  +V_4PC  +v_dBC  +v_dBN  +v_dCC  +v_dIN  +v_dPC  +v_dPCC +v_dPCN
> ##  +v_mB   +v_mC   +v_mP   +v_stot +v_sB)
> 
> ex.mod2 <- planor.model(model=model)
> set.seed(15)
> 
> ## ptm <- proc.time()
> ex.key2 <- planor.designkey(factors=modelfactors, model=ex.mod2, nunits=nlev^nexp, verbose=TRUE, randomsearch = TRUE)
Preliminary step 1 : processing the model specifications
Preliminary step 2 : performing prime decompositions on the factors
*** Main step for prime p = 2 : key-matrix search
  => search for columns 2 to 11 
      first visit to column 2
      first visit to column 3
    ---    col. 3 ( j = 2) 13 selected candidates
      first visit to column 4
    ---    col. 4 ( j = 3) 12 selected candidates
      first visit to column 5
    ---    col. 5 ( j = 4) 11 selected candidates
      first visit to column 6
    ---    col. 6 ( j = 5) 10 selected candidates
      first visit to column 7
    ---    col. 7 ( j = 6) 9 selected candidates
      first visit to column 8
    ---    col. 8 ( j = 7) 8 selected candidates
      first visit to column 9
    ---    col. 9 ( j = 8) 7 selected candidates
      first visit to column 10
    ---    col. 10 ( j = 9) 6 selected candidates
      first visit to column 11
    ---    col. 11 ( j = 10) 5 selected candidates
The search is closed: max.sol = 1 solution(s) found 
> ## cat("TEMPS planor.designkey NON symetrique ", proc.time()-ptm,"\n\n\n")
> 
> 
> ################################################
> # Comparaison
> ################################################
> 
> print(all.equal(ex.key, ex.key2))
[1] TRUE
> ex.des <- planor.design(key=ex.key)
> print(summary(ex.des))

********** Keymatrix  1 **********

DESIGN KEY MATRIX
    k_1 k_2 k_3 k_4 k_5 k_6 k_7 k_8 K_AP K_AC K_IB
*U*   1   0   1   0   1   0   1   0    1    0    1
*U*   0   1   1   0   0   1   1   0    0    1    1
*U*   0   0   0   1   1   1   1   0    0    0    0
*U*   0   0   0   0   0   0   0   1    1    1    1

TREATMENT EFFECTS CONFOUNDED WITH THE MEAN
1 = k_1 k_2 k_3
1 = k_1 k_4 k_5
1 = k_2 k_4 k_6
1 = k_3 k_5 k_6
1 = k_3 k_4 k_7
1 = k_2 k_5 k_7
1 = k_1 k_6 k_7
1 = k_1 k_8 K_AP
1 = k_2 k_8 K_AC
1 = k_3 K_AP K_AC
1 = k_3 k_8 K_IB
1 = k_2 K_AP K_IB
1 = k_1 K_AC K_IB
1 = k_2 k_3 k_4 k_5
1 = k_1 k_3 k_4 k_6
1 = k_1 k_2 k_5 k_6
1 = k_1 k_2 k_4 k_7
1 = k_1 k_3 k_5 k_7
1 = k_2 k_3 k_6 k_7
1 = k_4 k_5 k_6 k_7

The first 20 columns on a total of 127

BLOCK-and-TREATMENT EFFECTS CONFOUNDED WITH THE MEAN
nil

WEIGHT PROFILES
Treatment effects confounded with the mean: 3^13 4^26 5^24 6^24 7^26 8^13 11^1 
Treatment effects confounded with block effects: none 
Treatment pseudo-effects confounded with the mean: 3^13 4^26 5^24 6^24 7^26 8^13 11^1 
Treatment pseudo-effects confounded with block effects: none

[[1]]
[[1]]$k
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
k_1     1    0    1    1    1    0    1
k_2     0    1    1    1    0    1    1
k_3     0    0    0    1    0    0    0
k_4     0    0    0    0    1    1    1
k_5     0    0    0    0    1    0    0
k_6     0    0    0    0    0    1    0
k_7     0    0    0    0    0    0    1
k_8     1    1    1    0    0    0    0
K_AP    1    0    0    0    0    0    0
K_AC    0    1    0    0    0    0    0
K_IB    0    0    1    0    0    0    0


> 
> #########################################""
> 
> proc.time()
   user  system elapsed 
  0.584   0.044   0.629 
